2019.12.19 목요일 - 수업내용

// ------------------------------------------------------------------------------
1. 엑셀파일과 csv에 대한 간단한 설명

- csv의 형식으로 엑셀파일의 데이터를 게임에 인베드를 시킬 것이다.
- csv를 사용하는 이유는 엑셀파일을 쉽게 게임에 인베드를 할 수 있는 기능이 있기 때문이다.
- csv형식으로 엑셀파일을 저장한 경우에는 메모장으로 엑셀파일을 열수가 있다.

토큰나이즈
string[] splited = valStr.Split(',');

// ------------------------------------------------------------------------------
2. 골드 획득과 골드 소모에 대한 기능의 설계를 해보자.

- 어떻게 하면 Max레벨을 만들어내고 Max레벨을 넘어가면 Max레벨이 되도록하는 기능은 고민해보자.
- GameController.cs에서 골드
- 유니티에 내장되어 있는 세이브기능을 사용할 것이다.
- 그것을 사용할 때 실제로 들어있는 변수의 값을 넣어주어야 한다.
- set할 때 UI에 gold가 바뀌었다고 즉석에서 알려줄 수 있다.

- 새로운 스테이지로 넘어가는 것은 Touch() -> AddProgress(1)을 할 때 해준다.
=> 이 때 골드를 획득하도록 해주면 된다.

- 골드를 소모시켜줄 때의 설계를 해보자.
=> 동료 기능을 업그레이드 할 때 AddLevel을 할 때 골드가 소모된다.

- delegate함수를 이용하여 Gold를 소모시켜주자.
=> AnimHash에 delegate함수를 추가해주자.

- public으로 하면 get;set;을 해줄 때 어느 코드에서 이 변수를 참조하고 호출되고 있는지 tracking이 불가능하다.
- public변수처럼 사용하고 싶을 때는 property를 사용하는 것이 좋다.

public double Gold {
    get { return mGold; }
    set
    {
        // 2019.12.19 목요일 - 코드 추가
        // 
        if(value >= 0)
        {
            if(mGold > value)
            {
                // delegate가 비어있는지 확인시켜주는 키워드가 c# 7버전 이상에서부터 나왔다.
                // ctrl + .을 누르면 코드가 알아서 바뀐다.
                //if(goldConsumeCallback != null)
                //{
                //    goldConsumeCallback();
                //}
                goldConsumeCallback?.Invoke();
                // 골드소모를 시켜주는 함수를 호출했으므로 delegate를 비워준다.
                // 이중으로 호출이 되는 경우를 막기 위해서 이다.
                goldConsumeCallback = null;
                // 밑에 두개의 코드는 완전히 똑같고 퍼포먼스 상에서도 차이점이 별로 없다.
                //goldConsumeCallback();
                //goldConsumeCallback.Invoke();

                // 이 경우가 아니면 UseGold함수를 따로 만들어서 매개변수에 delegate함수를
                // 넣어주어 delegate의 기본을 null로 해주고 함수 안에서
                // delegate를 호출해주면 간단해진다.
                // 하지만 우리는 지금 get;set;을 사용하려고 하기 때문에 이렇게 약간 어려워진것이다.
            }
            mGold = value;
        }
        else
        {

        }
    }
}


// ------------------------------------------------------------------------------



























































































































