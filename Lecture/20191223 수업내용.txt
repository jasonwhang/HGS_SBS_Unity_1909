2019.12.23 월요일 - 수업내용

// ------------------------------------------------------------------------------------
1. 동료가 골드를 벌면 텍스트UI를 이펙트로 띄워주는 효과를 만들어보자.

- Colleague.cs
=> [SerializeField] private Transform mEffectPos;
- Colleague.cs -> Function
=> ColleagueController.Instance.JobFinish(mID, mEffectPos.position);
=> 이펙트를 터뜨려야 되는 위치를 ColleagueController에 알려주고 이 클래스에서의 역할은 끝내도록 한다.
- ColleagueController.cs
=> [SerializeField] private TextEffectPool mTextEffectPool;
- ColleagueController.cs -> JobFinish
=> public void JobFinish(int id, Vector3 pos)
=> 이펙트를 터뜨려야 되는 위치를 동료데이터를 가진 클래스가 알려주도록 매개변수를 추가해도록 한다.
- ColleagueController.cs -> JobFinish -> case eJobType.Gold:
=> TextEffect effect = mTextEffectPool.GetFromPool((int)eTextEffectType.ColleagueIncome);

- TextEffect.cs
using UnityEngine.UI;

public class TextEffect : MonoBehaviour
{
    [SerializeField]
    private Text mText;
    public void ShowText(string data)
    {
        mText.text = data;
    }
}

- TextEffectPool.cs
public class TextEffectPool : ObjPool<TextEffect>
{
    
    [SerializeField]
    private Transform mCanvas;
    protected override TextEffect GetNewObj(int id)
    {
        TextEffect newObj = Instantiate(mOriginArr[id], mCanvas);
        mPool[id].Add(newObj);
        return newObj;
    }
}

// ------------------------------------------------------------------------------------
2. 동료아이콘을 추가해주기

- Controller -> ColleagueController -> IconArr -> Size : 3
- Element 0 : Char01_1, Element 1 : Char02_1, Element 2 : Char03_1

- ColleagueController.cs -> Start함수
=> Init함수에 null이라고 되어 있는 부분에 IconArr을 넣어준다.

수정 전
elem.Init(null, i, mDataArr[i].Name, mDataArr[i].Contents, "구매",
          mDataArr[i].Level, mDataArr[i].ValueCurrent,
          mDataArr[i].CostCurrent, mDataArr[i].JobTime,
          AddLevel);

수정 후 
elem.Init(mIconArr[i], i, mDataArr[i].Name, mDataArr[i].Contents, "구매",
          mDataArr[i].Level, mDataArr[i].ValueCurrent,
          mDataArr[i].CostCurrent, mDataArr[i].JobTime,
          AddLevel);


// ------------------------------------------------------------------------------------
3. 플레이어에 스킬에 대한 기능의 설계를 해보자.

- 공격력 업그레이드 : 고정값
- 스킬1 : 배수터치
- 스킬2 : 동료채찍질
- 크리티컬 확률 : 퍼센트
- 크리티컬 데미지 : 고정값
- 골드획득량 증가 : 퍼센트
- 광물체력 감소 : 고정값
- 환생

- bool을 이용하여 퍼센트인지 고정값인지를 분류시킨다.


- 스킬에 필요한 데이터
- ID
- 이름
- 정보
- 레벨
- IconID : 스킬에 사용될 이미지의 ID에 대한 정보
- IsPercent : 스킬에 필요한 데이터가 퍼센트가 필요한 데이터인지 아닌지
- CostCurrent
- CostWeight
- CostBase
- ValueCurrent
- ValueWeight
- ValueBase
- CoolTime
- CoolTimeCurrent

// ------------------------------------------------------------------------------------
4. 










































































































































