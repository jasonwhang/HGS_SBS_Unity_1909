20191211 수업내용

- Try Catch는 유니티에서 가능하면 사용하지 않는 것이 좋다.
=> 가능하면 예외처리는 if문으로 막는 것이 좋다.

// ------------------------------------------------------------------------------
1.
gamecontroller		gemcontroller
gold, stage		currentgem, images, hp

보석을 관리해주어야 한다.
=> 보석에 대한 이미지들을 관리해주어야 한다.
=> 해당하는 이미지들을 컨트롤할 스크립트를 만들어서 제어를 해주자.
=> 책갈피같이 시작지점에 맞추어서 이미지를 바꾸도록 하는 설계

이미지를 배열로 관리한다.
private Sprite[] mGemSprite;

15장의 이미지가 로드된다.
mGemSprite = Resources.LoadAll<Sprite>("Gem");

- 게임엔진 아키텍쳐라는 책을 봐보자.

public class GemController : MonoBehaviour
{
    public const int MAX_GEM_COUNT = 3;

    [SerializeField]
    private int mSheetCount = 5;

    [SerializeField]
    private SpriteRenderer mGem;

    [SerializeField]
    private Sprite[] mGemSprite;
    private double mCurrentHP, mMaxHP;
    private int mCurrentPhase, mStartIndex;

    // Start is called before the first frame update
    void Awake()
    {
        mGemSprite = Resources.LoadAll<Sprite>("Gem");
    }

    // 새로운 보석을 세팅해주도록 하는 함수
    // 0번보석(에메랄드보석) : Element0
    // 1번보석(루비보석) : Element5
    // 2번보석(토파즈보석) : Element10
    public void GetNewGem(int id)
    {
        // mStartIndex = Element0
        // 보석 1개당 Element가 5개씩 존재한다.
        // 0번 * 5개 = 0번째 인덱스
        // 1번 * 5개 = 5번째 인덱스
        // 2번 * 5개 = 5번째 인덱스
        mStartIndex = id * mSheetCount;
        // 해당하는 보석의 이미지를 세팅을 해준다.
        mGem.sprite = mGemSprite[mStartIndex];
        // 새로운 보석을 가져오는 함수이므로 페이즈는 처음부터 진행을 해주어야 한다.
        mCurrentPhase = 0;
    }

    public void AddProgress(double value)
    {
        mCurrentHP += value;
        // 전체 체력의 0% ~ 20%가 보석의 0단계이고
        // 전체 체력의 20% ~ 40%가 보석의 1단계이고
        // 전체체력의 40% ~ 60%가 보석의 3단계이고
        // 전체체력의 60% ~ 80%가 보석의 4단계이고 완성된 보석의 이미지가 나온다.
        // 그리고 전체체력의 80% ~ 100%가 되면 다음단계로 넘어가는 함수가 호출된다.
        // 보석 1종류당 이미지는 총4개의 이미지가 있고 4개의 이미지가 각 단계별 이미지가 된다.
        // 그러므로 4단계까지 갔을 때 보석이 완전히 세공된 이미지가 보여지고
        // 5단계가 되면 새로운 보석이 나오는 설계를 해준다.
        if(mCurrentHP >= mMaxHP * 0.2f * mCurrentPhase)
        {
            //next phase
            if(mCurrentPhase > 4)
            {
                //Clear
                return;
            }
            mCurrentPhase++;
            mGem.sprite = mGemSprite[mStartIndex + mCurrentPhase];            
        }
    }
}

// ------------------------------------------------------------------------------
2. 게임컨트롤러에 터치기능을 만들고 보석의 이미지가 바뀌는 기능을 만들어보자.

- GameController.cs

- TouchManager.cs
=> void Update()
=> 
if(hit.collider.gameObject == gameObject)
{
    Timer effect = mEffectPool.GetFromPool(0);
    effect.transform.position = hit.point;
    // 2019.12.11 - 코드 추가
    GameController.Instance.Touch();
}

if (GetTouch())
{
    // 2019.12.11 - 코드 추가
    GameController.Instance.Touch();
}


































































































