2019.12.30 월요일 - 수업내용

- Waring을 없애는 방법
#pragma warning disable 0649
변수
#pragma warning restore

// ------------------------------------------------------------------------------------
1. SAVE와 LOAD의 개념

- 메모리를 통채로 SAVE를 하는 방법
=> 용량이 너무 커져서 SAVE를 많이 하지 못한다.

- 필요한 데이터만 Save를 하는 방법
=> 플레이어의 레벨
=> 플레이어의 소지금
=> 현재 진행되는 보석의 남은 체력
=> 현재 스테이지의 정보

- 가장 간단한 방법
=> PlayerPrefs를 이용하는 방법
=> 단점 : 보안에 매우 취약하다.
=> 예제)
public void Save()
{
    // Save를 하는 방법
    PlayerPrefs.SetString("GemHP", mCurrentHP.ToString());
    // Load를 하는 방법
    // 비어있는 Key인지 아닌지를 먼저 체크를 해주어야 한다.
    string data = PlayerPrefs.GetString("GemHP");
}

- Byte데이터로 바꾸는 방법으로 단점인 보안을 해결해준다.

// ------------------------------------------------------------------------------------
2. Save를 하기 위한 Data를 만들어준다.

- EnumAndData.cs에 PlayerSaveData클래스를 만들어준다.
public class PlayerSaveData
{
    public int Stage;
    public double Gold;
    public double GemHP;
    public int[] PlayerLevels;
    public int[] ColleagueLevels;
}

- GameController.cs에 PlayerSaveData클래스를 자료형으로 하는 변수를 만들어준다.
=> private PlayerSaveData mPlayer;

- GameController.cs에서 필요없는 변수인 mGold와 mStage를 삭제한다.
=> 에러가 나는 부분에서 모두 mPlayer.Gold, mPlayer.Stage로 바꾸어준다.

- 강사님께서는 Save와 Load의 Base클래스를 만들어두고 그것을 파생시키면서 해주었다.
=> 예외처리에 대한 모든 사항들을 고려하기 위해서이다. 
=> 데이터가 원래 없던 것인때 패치가 되면서 새롭게 데이터변수가 추가가 되었다.
=> 기존에 있던 것을 Load를 해버리면 새롭게 추가된 변수에 대한 정보를 Load가 되지 않는 문제가 된다.

BinaryFormatter bf = new BinaryFormatter()
MemoryStream stream = new MemoryStream()

bf.Serialize(stream, user);
stream.close();

// ------------------------------------------------------------------------------------
3. GameController.cs에서 Save와 Load를 하는 기능을 만들어준다.

- using을 추가해준다.
// 2019.12.30 월요일 - using 코드 추가
// 시스템이 Runtime중에 직렬화된 binary형태로 변화시켜주기 위한 라이브러리
=> using System.Runtime.Serialization.Formatters.Binary;

- using을 추가해준다.
=> using System.IO;

- Save함수의 기능을 작성해준다.
public void Save()
{
    BinaryFormatter formatter = new BinaryFormatter();
    MemoryStream stream = new MemoryStream();

    // mPlayer의 데이터를 stream에 메모리를 통채로 집어넣는 기능이다.(데이터가 복제가 된 것이다.)
    formatter.Serialize(stream, mPlayer);

    // Buffer는 어떠한 상황에서 데이터를 사용하기 위해 미리 들고 있는 메모리 데이터의 공간이다.
    // 버퍼링 : 인터넷에서 영상의 데이터를 미리 어느정도 들고 있게 하기 위해 로드를 하는 시간을 의미한다.
    string data = Convert.ToBase64String(stream.GetBuffer());
    Debug.Log(data);
    PlayerPrefs.SetString("Player", data);
    stream.Close();
}


- Load함수의 기능을 작성해준다.
public void Load()
{
    string data = PlayerPrefs.GetString("Player");
    if(!string.IsNullOrEmpty(data))
    {
        // 정상적인 데이터가 data에 들어온 경우
        Debug.Log(data);

        BinaryFormatter formatter = new BinaryFormatter();
        // FromBase64String의 return값은 byte[]이다.
        MemoryStream stream = new MemoryStream(Convert.FromBase64String(data));

        // formatter.Deserialize의 return값이 object이다.
        // 강제형변환을 해준다.
        mPlayer = (PlayerSaveData)formatter.Deserialize(stream);

        stream.Close();
    }
    else
    {
        // 잘못된 데이터가 data에 들어온 경우
    }
}

// ------------------------------------------------------------------------------------
4. Gem에 대한 정보와 ColleagueData에 대한 정보를 Save를 시키는 기능을 만든다.

- GemController.cs에서 mCurrentHP에 대한 Get프로퍼티를 만든다.
=> public double CurrentHP { get { return mCurrentHP; } }

- GameController.cs에서 Save함수에 정보를 가져온다.
=> mPlayer.GemHP = mGem.CurrentHP;

- PlayerInfoController.cs에서 PlayerLevel들을 가져오기 위한 Get프로퍼티를 만든다.
public int[] LevelArr {
    get 
    {
        int[] arr = new int[mInfos.Length];

        for(int i = 0; i < arr.Length; i++)
        {
            arr[i] = mInfos[i].Level;
        }

        return arr;
    }
}

- GameController.cs에서 Save함수에 정보를 가져온다.
=> mPlayer.PlayerLevels = PlayerInfoController.Instance.LevelArr;

- ColleagueController.cs에서 ColleagueLevel들을 가져오기 위한 Get프로퍼티를 만든다.
public int[] LevelArr {
    get {
        int[] arr = new int[mDataArr.Length];

        for (int i = 0; i < arr.Length; i++)
        {
            arr[i] = mDataArr[i].Level;
        }

        return arr;
    }
}


- GameController.cs에서 Save함수에 정보를 가져온다.
=> mPlayer.ColleagueLevels = ColleagueController.Instance.LevelArr;

// ------------------------------------------------------------------------------------
5. 에러가 나는 부분을 수정
- AnimHash.cs에서 애니메이션 해쉬에 대한 변수를 새로 추가해준다.
=> public static readonly int UIMove = Animator.StringToHash("Move");

- MainUIController.cs에서 에러가 나는 부분을 수정해준다.
=> private static int mUIMoveHash = Animator.StringToHash("Move");
=> private static int mUIMoveHash = Animator.StringToHash("UIMove");

// ------------------------------------------------------------------------------------
6. Gem의 상태를 저장하기 위한 기능을 만들어준다.

- GemController.cs에서 LoadGem 함수의 기능을 만들어준다.

- GemController.cs의 GetNewGem의 int id는 GameController에서 정보를 준다.
=> int id = UnityEngine.Random.Range(0, GemController.MAX_GEM_COUNT);
=> mGem.GetNewGem(id);

- public class PlayerSaveData에 변수 추가
=> public int GemID;

















































































































