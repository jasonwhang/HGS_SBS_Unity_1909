2020.01.02 목요일 - 수업내용

// ----------------------------------------------------------------------------------------
1. Player의 레벨들을 저장하고 불러오는 기능을 추가

- PlayerInfoController.cs에서 Load함수를 만든다.
public void Load(int[] levelArr)
{
    // levelArr은 구버전이었을 때의 세이브데이터이다.
    // mInfos는 최신버전일 때의 세이브데이터이다.
    // 구버전의 세이브데이터를 우선 불러오고 새롭게 추가되는 데이터들은 추가작업으로 데이터를 넣어준다.
    for(int i = 0; i < levelArr.Length; i++)
    {
        mInfos[i].Level = levelArr[i];
        // 아래의 경우 mInfos[0]의 경우 레벨이 1부터 시작하기 때문에 계산방식이 맞지 않게 된다.
        //ApplyLevelUP(i, levelArr[i]); 

        // 로드가 된 데이터를 가지고 현재 데이터의 정보를 계산해준다.
        CalcAndShowData(i);
    }
}


- PlayerInfoController.cs에서 ApplyLevelUp함수에서 계산하는 내용을 새롭게 함수로 만들어 관리한다.
=> private void CalcAndShowData(int id)

// ----------------------------------------------------------------------------------------
2. Colleage의 레벨들을 저장하고 불러오는 기능을 추가

- ColleagueController.cs에서 Load함수를 만든다.

- ColleagueController.cs에서 ApplyLevel함수에서 계산하는 부분을 가져온다.
public void CalcAndShowData(int id)
{
    mDataArr[id].ValueCurrent = mDataArr[id].ValueBase * 
                                Math.Pow(mDataArr[id].ValueWeight, mDataArr[id].Level);
    mDataArr[id].CostCurrent = mDataArr[id].CostBase * 
                                Math.Pow(mDataArr[id].CostWeight, mDataArr[id].Level);
    mElementList[id].Renew(mDataArr[id].Contents, "구매", mDataArr[id].Level,
                           mDataArr[id].ValueCurrent, mDataArr[id].CostCurrent,
                           mDataArr[id].JobTime);
}

// ----------------------------------------------------------------------------------------
3. Colleage의 Element가 생성되는 시점이랑 데이터가 Loat되는 시점이랑 같아서 Null에러가 난다.

- Element가 생성되는 시점이랑 Load가 되는 시점이랑 Start함수에서 동시에 진행이 된다.
=> Element가 생성되는 시점을 Awake로 바꾸는 방법
=> Load가 되는 함수를 코루틴으로 만든다.

- ColleageController.cs와 PlayerInfoController.cs에서 bool변수를 만들어 대기를 시켜준다.
=> 로드가 다 되는 동안 대기를 시켜주도록 bool변수를 추가

- GameController.cs에서 LoadGames라는 코루틴 함수를 만들어준다.

- GameController.cs에서 Start함수에서 코루틴함수를 실행시켜준다.

// ----------------------------------------------------------------------------------------
4. 최초로 게임을 시작했을 때 로드를 하는 기능을 만들어보자.

- GameController.cs 모든 데이터를 날려버린다.
=> PlayerPrefs.DeleteAll();

- 에메랄드보석만 나오는 이유
=> LoadGames에서 mGem.LoadGem의 GemID가 0번으로 고정되기 때문이다.
- 에메랄드보석의 제일처음상태가 나오지 않는 이유
=> 계산을 할 때 잘못되었기 때문이다.

- GemID를 Default값을 만들어주어야 한다.

- GameController.cs의 Load함수에서 else에 코드 추가
 // 2020.01.02 목요일 - 코드 추가
 mPlayer = new PlayerSaveData();
 // 2020.01.02 목요일 - 코드 추가
 // 새로운 데이터가 생성이 되었을 때 그 상태에 대한 안내에 대한 키워드를 알려주어야 한다.
 mPlayer.GemID = -1;


- GameController.cs에서 랜덤하게 나오도록 해주자.
// 2020.01.02 목요일 - 코드 추가
if(mPlayer.GemID < 0)
{
    mPlayer.GemID = UnityEngine.Random.Range(0, GemController.MAX_GEM_COUNT);
}

// ----------------------------------------------------------------------------------------
5. 

- StaticValues.cs에 상수 변수를 추가해준다.
// 2020.01.02 목요일 - 상수 변수 추가
public const int PLATER_INFOS_LENGTH = 7;
public const int COLLEAGUE_INFOS_LENGTH = 3;

// ----------------------------------------------------------------------------------------
6. 플레이어 스킬을 구현해보자.

- GameController.cs에서 변수와 프로퍼티를 추가해준다.

// 2020.01.02 목요일 - 변수 & 프로퍼티 추가
public float CriticalRate 
{
    get { return mCriticalRate; }
    set { mCriticalRate = value; }
}
private float mCriticalRate;

// 2020.01.02 목요일 - 변수 & 프로퍼티 추가
public float CriticalVaule 
{
    get { return mCriticalValue; }
    set { mCriticalValue = value; }
}
private float mCriticalValue;

- GameController.cs에서 Touch함수에서 코드 추가
public void Touch()
{
    // 2020.01.02 목요일 - 코드 추가
    double touchPower = mTouchPower;
    // 2020.01.02 목요일 - 코드 추가
    //float randVar = UnityEngine.Random.Range(0, 100f);
    // 0 ~ 1사이의 값이 나오도록 하는 함수이다.
    float randVar = UnityEngine.Random.value; 

    if(randVar <= mCriticalRate)
    {
        // 크리티컬 확률이 들어왔으므로 크리티컬이 터져야 한다.
        touchPower *= (1 + mCriticalValue);
        Debug.Log("Critical" + "!!!!");
    }

    if (mGem.AddProgress(mTouchPower))
    {
        mPlayer.Stage++;
        mPlayer.GemID = UnityEngine.Random.Range(0, GemController.MAX_GEM_COUNT);
        mGem.GetNewGem(mPlayer.GemID);
    }
}

- PlayerInfoController.cs에서 CalcAndShowData함수에서 스킬추가를 해준다.
if (id == 0)
{
    GameController.Instance.TouchPower = mInfos[id].ValueCurrent;
}
else if(id == 1)
{

}
else if (id == 2)
{

}
else if (id == 3)
{
    // 2020.01.02 목요일 - 코드 추가
    GameController.Instance.CriticalRate = (float)mInfos[id].ValueCurrent;
}
else if(id == 4)
{
    // 2020.01.02 목요일 - 코드 추가
    GameController.Instance.CriticalVaule = (float)mInfos[id].ValueCurrent;
}


// ----------------------------------------------------------------------------------------
























































































































































