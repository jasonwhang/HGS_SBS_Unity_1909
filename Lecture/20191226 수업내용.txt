2019.12.26 목요일 - 수업내용

C언어는 메모리에 직접 접근할 수 있기 때문에 효율면에서 좋다.
컴파일 작업을 거치지 않고 스크립트로 하기 위해서는 파이썬이 좋다.

// ------------------------------------------------------------------------------------
1. JSON의 개요

- XML : 마크업 형태
=> 원래는 파이썬에서 스크립트로 작성을 한 것을 플러그인을 일일히 만들어 적용시켰다.
=> 하지만 그 방식을 범용적인 프로그램을 만들어서 규칙만 지키면 사용할 수 있도록 하기 위해 만든 소프트웨어이다.
<Monster>
	<Name>Orc</Name>
	<HP>100</HP>
</Monster>

- JSON : XML에서 발전이 된 형태이다.
{
	Name : "Orc",
	HP : 100
}

{
	"Goal" : [100000, 100000000, 1000000000],
}

- CSV : Excel로 키면 정리가 되어 나온다.
=> 기획자들이 편애하는 방법이다.

// ------------------------------------------------------------------------------------
2. Json을 사용하기 위한 준비

*.dll : 동적 링크 라이브러리
검색키워드 : json .net
주소이름 : Json.NET - Newtonsoft
주소 : https://www.newtonsoft.com/json
다운로드 할 파일 : 깃허브 - Json120r3.zip
가져올 파일 : 압축풀기 -> Bin파일
유니티버전확인 : File -> Build Settings -> Player Settings -> Inspector -> Other Settings
-> Configuration -> Scripting Runtime Version or Api Compatibility Level 둘 중 하나의 버전에
맞춘다.
다운받을 버전 : net45 -> Newtonsoft.Json.dll -> 선택한 파일 압축 풀기 -> 다운로드 받을 파일 -> 
Unity -> Assets폴더 내 아무데나

// ------------------------------------------------------------------------------------
3. Json을 사용하기 위해 스크립트로 제어하기

- Assets -> Scripts -> C# Script -> 이름수정 : JsonGenerator.cs
- 스크립트에 using Newtonsoft.Json;을 추가해주기
- 데이터를 저장할 변수 만들기 
=> private ColleagueData[] mDataArr;
- 데이터를 스크립트로 만들기
=> ColleagueController.cs에서 데이터를 복사하여 붙여넣기하기
mDataArr = new ColleagueData[3];
mDataArr[0] = new ColleagueData();
mDataArr[0].Name = "No.1";
mDataArr[0].Level = 0;
mDataArr[0].Contents = "<color=#ff0000ff>{1}초</color> 마다 <color=#0000ffff>{0}골드</color>를 획득합니다.";
mDataArr[0].JobTime = 1.1f;
mDataArr[0].JobType = eJobType.Gold;
mDataArr[0].ValueCurrent = 1;
mDataArr[0].ValueWeight = 1.08d;
mDataArr[0].ValueBase = 1;
mDataArr[0].CostCurrent = 100;
mDataArr[0].CostWeight = 1.2d;
mDataArr[0].CostBase = 100;

mDataArr[1] = new ColleagueData();
mDataArr[1].Name = "No.2";
mDataArr[1].Level = 0;
mDataArr[1].Contents = "<color=#ff0000ff>{1}초</color> 마다 한번씩 터치를 해줍니다.";
mDataArr[1].JobTime = 1f;
mDataArr[1].JobType = eJobType.Touch;
mDataArr[1].ValueCurrent = 0;
mDataArr[1].ValueWeight = 1.08d;
mDataArr[1].ValueBase = 1;
mDataArr[1].CostCurrent = 200;
mDataArr[1].CostWeight = 1.2d;
mDataArr[1].CostBase = 200;

mDataArr[2] = new ColleagueData();
mDataArr[2].Name = "No.3";
mDataArr[2].Level = 0;
mDataArr[2].Contents = "<color=#ff0000ff>{1}초</color> 마다 <color=#0000ffff>{0}골드</color>를 획득합니다.";
mDataArr[2].JobTime = 1.5f;
mDataArr[2].JobType = eJobType.Gold;
mDataArr[2].ValueCurrent = 2;
mDataArr[2].ValueWeight = 1.1d;
mDataArr[2].ValueBase = 2;
mDataArr[2].CostCurrent = 300;
mDataArr[2].CostWeight = 1.2d;
mDataArr[2].CostBase = 300;

- json으로 데이터를 저장하기 위한 함수 만들기
public void GeneratoeColleague()
{
    string data = JsonConvert.SerializeObject(mDataArr, Formatting.Indented);
    Debug.Log(data);
}

- 1번키를 누르면 json형태로 저장되도록 하는 키입력 만들기
void Update()
{
    if(Input.GetKeyDown(KeyCode.Alpha1))
    {
        GeneratoeColleague();
    }
}


// ------------------------------------------------------------------------------------
4. 유니티 데이터패스 정리하기 위한 방법

- 참고사이트 : https://3dmpengines.tistory.com/1745

StreamWriter writer = new StreamWriter(Application.dataPath + "/Colleague.json");
writer.Write(data);
writer.Close();

- Application.dataPath
=> Application.dataPath : 프로젝트디렉토리/Assets

- 다 하고 실행하면 결과가 Colleague.json이라는 파일이 생성된다.

// ------------------------------------------------------------------------------------
5. Json파일을 로드하기 위하여 기능을 만들기

- Resources폴더 -> 새폴더 -> 이름수정 : JsonFiles
- Colleague.json을 JsonFiles폴더로 옮기기
- 확장자까지 파일이름을 사용하면 로드가 잘 되지 않는다. => 파일이름까지만 입력한다.
- Json파일의 자료형을 알아보는 방법
=> 자료형은 TextAsset이다.
=> .txt, .html, .htm, .xml, .bytes, .Json, .csv, .yaml, .fnt

- private void LoadColleague()
private void LoadColleague()
{
    string data = Resources.Load<TextAsset>("JsonFiles/Colleague").text;
    Debug.Log(data);
    // GemController에서 LoadAll을 할 때 자료형의 타입이 Sprite이고 받는 타입은 Sprite[]이었다.
    // 이유는 LoadAll자체가 []형태로 받아지기 때문이다.
    // 하지만 여기서는 ColleageData만 하면 1개만 나오기 때문에 ColleageData[]로 해주어야 한다.
    mDataArr = JsonConvert.DeserializeObject<ColleagueData[]>(data);
}

- 유니티의 Inspector에서 Json Generator.cs에서 결과를 확인하기
=> 처음에는 Size가 0으로 되어있다.
=> 하지만 GameScene을 한 번 클릭하고 2번키를 누르면 MDataArr의 Size가 3이되면서 데이터가 들어온다.

// ------------------------------------------------------------------------------------


















































































































