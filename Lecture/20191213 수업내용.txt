20191213 수업내용

// ------------------------------------------------------------------------------
1. 벽 만들기

- Create Empty
- Add Component -> Box Collider2D
- Box Collider2D -> Position : X, Y와 Scale : Y를 조정하기

// ------------------------------------------------------------------------------
2. 동료오브젝트에 스크립트 추가하고 스피드 1로 설정

// ------------------------------------------------------------------------------
3. Colleague.cs에 코루틴함수 시작해주기

// ------------------------------------------------------------------------------
4. 동료캐릭터에 이펙트가 터지게 하기 위한 위치잡아주기

- 각 동료캐릭터에 빈 오브젝트를 추가하여 위치조정하고 이름을 EffectPos로 정하기
- Colleague.cs에 변수 추가해주기
- 추가한 변수에 생성해준 EffectPos를 넣기

// ------------------------------------------------------------------------------
5. 동료캐릭터들의 이름을 수정하고 그것들을 Prefab으로 만들어 Hierarchy에서 삭제하기

// ------------------------------------------------------------------------------
6. 동료캐릭터를 생성하게 하기 위한 스크립트를 만들어주자.

- ColleagueController.cs를 만든다.
- ColleagueController.cs가 가지고 있어야 하는 정보들
=> 동료캐릭터에 대한 Prefab들을 알고 있어야 한다.
=> 동료캐릭터를 배치할 위치를 알고 있어야 한다.
=> 동료캐릭터가 가지고 있을 데이터의 정보들을 모아놓은 데이터클래스를 알고 있어야 한다.

- 데이터클래스를 관리하는 방법
=> 스크립팅 가능한 오브젝트(ScriptableObject)

- 유튜브에서 유니티로 강의하는 사람들
=> Brackeys
=> Jason Welmann
=> Mix and Jam
=> 개발자 라라

// ------------------------------------------------------------------------------
7. 동료캐릭터에 대한 데이터 클래스를 만들어주자.

private void Awake()
{
    mDataArr = new ColleagueData[3];

    mDataArr[0] = new ColleagueData();
    mDataArr[0].Name = "No.1";
    mDataArr[0].Level = 0;
    mDataArr[0].JobTime = 1.1f;
    mDataArr[0].CostCurrent = 100;

    mDataArr[1] = new ColleagueData();
    mDataArr[1].Name = "No.2";
    mDataArr[1].Level = 0;
    mDataArr[1].JobTime = 1f;
    mDataArr[1].CostCurrent = 200;

    mDataArr[2] = new ColleagueData();
    mDataArr[2].Name = "No.3";
    mDataArr[2].Level = 0;
    mDataArr[2].JobTime = 1.5f;
    mDataArr[2].CostCurrent = 300;
}


// ------------------------------------------------------------------------------
8.

- Colleague.cs에서 Start함수를 Init함수로 수정해준다.
=> public void Init(string Name, float period)

- 하지만 동료캐릭터에 좀 더 복잡한 시스템을 갖추고 있다면 매개변수에 직접 정보를 입력하는 것이 아닌
동료캐릭터의 데이터정보를 가진 클래스를 직접 들고 있게 하는 것이 좋다.

- Period는 동료캐릭터의 레벨이 증가하여 값이 변화가 될 때 어떻게 처리하면 좋을지에 대한 설계를 고민해보자.

- Colleague.cs에 변수 추가

- Init함수에 추가해준 변수를 초기화

// ------------------------------------------------------------------------------
9. 동료캐릭터를 생성하고 배치하는 기능을 만들어보자.

- ColleagueController.cs에서 AddLevel을 통해 동료캐릭터를 생성하고 배치하고 초기화를 한다.
- ColleagueController.cs에서 TempInstanciate함수를 만들어준다.
- 빈 오브젝트 생성 -> 이름수정 : ColleagueController
- ColleagueController오브젝트를 Controller오브젝트 하위로 드래그 앤 드롭
- ColleagueController -> Add Component -> ColleagueController.cs
- ColleagueController.cs -> Prefab : Size - 3
- 3개의 Prefab을 연결시켜주기
- 빈 오브젝트로 만들어서 동료캐릭터의 스폰위치를 설정해주고 연결시켜준다.
- UICanvas에 Button을 만들어주고 On Click()에 ColleagueController오브젝트를 연결한다.
- TempInstatiate함수를 호출해주고 생성해줄 동료캐릭터의 ID를 그 아래에 입력해준다.

// ------------------------------------------------------------------------------
10. 버튼을 눌렀을 때 TouchArea에 버튼이 있으면 같이 눌리는 현상을 막기

- Button에 BoxCollider를 추가해주어서 Button의 크기만큼 Size를 조정하기
- 하지만 이 방법은 약간 편법이라고 하셨다.


// ------------------------------------------------------------------------------
11. 데이터클래스에서 동료캐릭터의 기능을 구분해주기 위한 설계를 해주기

- ColleagueController.cs
=> 데이터를 가지고서 조작하는 스크립트
- Colleague.cs
=> 기능을 가지고 있는 스크립트
- ColleagueData클래스
=> 데이터만 가지고 있는 클래스

- ColleagueData에 기능별유형에 해당하는 변수를 추가해주기
- enum으로 JobType을 만들어주기

// ------------------------------------------------------------------------------
12. ColleagueController.cs에서 동료캐릭터의 기능을 불러오는 방법

싱글턴
[Serialize]

// ------------------------------------------------------------------------------




























































